###PureBinary
###Construct new binary axial algebras where edge algebras are the same. We only do for diagram is K_3. 

###Edge Algebra S(0)

Spin3:=function(F)
local mas, prod, e0, e1, e2, id, A, frob;

## order of the basis: e0, e1, e2, id

mas :=[[[0,0,0,1],[0,0,0,0],[0,0,0,0],[1,0,0,0]],[[0,0,0,0],[0,0,0,1],[0,0,0,0],[0,1,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,1],[0,0,1,0]],[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]];

prod := function(u,v)
local i,j,k, ans;
ans:=[0,0,0,0];
for i in [1..4] do
for j in [1..4] do
for k in [1..4] do
ans[k] := ans[k] + u[i]*v[j]*mas[i][j][k];
od;
od;
od;
return ans;
end;

e0:=[1,0,0,0];;
e1:=[0,1,0,0];;
e2:=[0,0,1,0];;
id:=[0,0,0,1];;

A:=VectorSpace(F,[e0,e1,e2,id]);;

frob:=[[2,0,0,0],[0,2,0,0],[0,0,2,0],[0,0,0,2]];

return [A,F,mas,prod,frob];;
end;

Spin3Details:=function();
Print("1:Vector Space, 2:Field, 3:Mult Matrix, 4:Mult Function, 5:Frobenius Matrix, Basis is e0,e1,e2,id"); 
end;

###Edge Algebra S(0,al)

Split3:=function(al,FF)
local F, d, mas, prod, e0, e1, e2, z1, z2, A, frob;


if al in FF then F:=FF;
else F:=FunctionField(FF,["al"]);
fi;


## order of the basis: e0, e1, e2, z1, z2

d:=al^0;


mas :=d * [
[[0,0,0,al*(2-al),(1-al)*(al+1)],[0,0,0,0,0],[0,0,0,0,0],[al,0,0,0,0],[1-al,0,0,0,0]],
[[0,0,0,0,0],[0,0,0,al*(2-al),(1-al)*(al+1)],[0,0,0,0,0],[0,al,0,0,0],[0,1-al,0,0,0]],
[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,al*(2-al),(1-al)*(al+1)],[0,0,al,0,0],[0,0,1-al,0,0]], 
[[al,0,0,0,0],[0,al,0,0,0], [0,0,al,0,0],[0,0,0,1,0],[0,0,0,0,0]],
[[1-al,0,0,0,0],[0,1-al,0,0,0], [0,0,1-al,0,0],[0,0,0,0,0],[0,0,0,0,1]]];

prod := function(u,v)

local i,j,k, ans;

ans:=d * [0,0,0,0,0];

for i in [1..5] do
for j in [1..5] do
for k in [1..5] do

ans[k] := ans[k] + u[i]*v[j]*mas[i][j][k];

od;
od;
od;

return ans;

end;

e0:=d*[1,0,0,0,0];;
e1:=d*[0,1,0,0,0];;
e2:=d*[0,0,1,0,0];;
z1:=d*[0,0,0,1,0];;
z2:=d*[0,0,0,0,1];;

A:=VectorSpace(F,[e0,e1,e2,z1,z2]);;

frob:=[(al+1)*(2-al)*[1,0,0,0,0],(al+1)*(2-al)*[0,1,0,0,0],(al+1)*(2-al)*[0,0,1,0,0,0],[0,0,0,al+1,0],[0,0,0,0,2-al]];

return [A,F,mas,prod,frob];;
end;

Split3Details:=function();
Print("1:Vector Space, 2:Field, 3:Mult Matrix, 4:Mult Function, 5:Frobenius Matrix, Basis is e0, e1, e2, z1, z2"); 
end;

###Edge Algebra S(hat)(0,-1)circ

SpExC3:=function(FF)
local F, d, mas, prod, e0, e1, e2, z1, n, A, frob;

F:=FF;

## order of the basis: e0, e1, e2, z1, n

d:=1^0;

mas :=d * [
[[0,0,0,-3,2],[0,0,0,0,0],[0,0,0,0,0],[-1,0,0,0,0],[0,0,0,0,0]],
[[0,0,0,0,0],[0,0,0,-3,2],[0,0,0,0,0],[0,-1,0,0,0],[0,0,0,0,0]],
[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,-3,2],[0,0,-1,0,0],[0,0,0,0,0]], 
[[-1,0,0,0,0],[0,-1,0,0,0], [0,0,-1,0,0],[0,0,0,1,0],[0,0,0,0,0]],
[[0,0,0,0,0],[0,0,0,0,0], [0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]];

prod := function(u,v)
local i,j,k, ans;
ans:=d * [0,0,0,0,0];
for i in [1..5] do
for j in [1..5] do
for k in [1..5] do
ans[k] := ans[k] + u[i]*v[j]*mas[i][j][k];
od;
od;
od;
return ans;
end;

e0:=d*[1,0,0,0,0];;
e1:=d*[0,1,0,0,0];;
e2:=d*[0,0,1,0,0];;
z1:=d*[0,0,0,1,0];;
n:=d*[0,0,0,0,1];;

A:=VectorSpace(F,[e0,e1,e2,z1,n]);;

frob:=[[3,0,0,0,0],[0,3,0,0,0],[0,0,3,0,0,0],[0,0,0,1,0],[0,0,0,0,0]];

return [A,F,mas,prod,frob];;
end;

SpExC3Details:=function();
Print("1:Vector Space, 2:Field, 3:Mult Matrix, 4:Mult Function, 5:Frobenius Matrix, Basis is e0, e1, e2, z1, n"); 
end;

###Edge Algebra S(0,-1)circ

SpEx3:=function(FF)
local F, d, mas, prod, e0, e1, e2, z1, A, frob;

F:=FF;

## order of the basis: e0, e1, e2, z1

d:=1^0;

mas :=d * [
[[0,0,0,-3],[0,0,0,0],[0,0,0,0],[-1,0,0,0]],
[[0,0,0,0],[0,0,0,-3],[0,0,0,0],[0,-1,0,0]],
[[0,0,0,0],[0,0,0,0],[0,0,0,-3],[0,0,-1,0]], 
[[-1,0,0,0],[0,-1,0,0],[0,0,-1,0],[0,0,0,1]],
];

prod := function(u,v)
local i,j,k, ans;
ans:=d * [0,0,0,0];
for i in [1..4] do
for j in [1..4] do
for k in [1..4] do
ans[k] := ans[k] + u[i]*v[j]*mas[i][j][k];
od;
od;
od;
return ans;
end;

e0:=d*[1,0,0,0];;
e1:=d*[0,1,0,0];;
e2:=d*[0,0,1,0];;
z1:=d*[0,0,0,1];;

A:=VectorSpace(F,[e0,e1,e2,z1]);;

frob:=[[3,0,0,0],[0,3,0,0],[0,0,3,0,0],[0,0,0,1]];

return [A,F,mas,prod,frob];;
end;

SpEx3Details:=function();
Print("1:Vector Space, 2:Field, 3:Mult Matrix, 4:Mult Function, 5:Frobenius Matrix, Basis is e0, e1, e2, z1"); 
end;

###Edge Algebra 4B(al,al^2/2)

4B3:=function(al,FF)
local F, bt, z, mas, prod, a0, a0p, a1, a1p, a2, a2p, d, A, frob;

if al in [1,0,2] then Print("Not Defined!"); 
else

if al in FF then F:=FF;
else F:=FunctionField(FF,["al"]);
fi;
bt:=al^2/2;

## order of the basis: a0, a0p, a1, a1p, a2, a2p, d

z:=al^0;

mas :=z * [
[[1,0,0,0,0,0,0], (al/2)*[1,1,0,0,0,0,-1], (bt/2)*[1,-1,1,-1,0,0,1], (bt/2)*[1,-1,-1,1,0,0,1], (bt/2)*[1,-1,0,0,1,-1,1], (bt/2)*[1,-1,0,0,-1,1,1], (al/2)*[1,-1,0,0,0,0,1]],
[(al/2)*[1,1,0,0,0,0,-1], [0,1,0,0,0,0,0], (bt/2)*[-1,1,1,-1,0,0,1], (bt/2)*[-1,1,-1,1,0,0,1], (bt/2)*[-1,1,0,0,1,-1,1], (bt/2)*[-1,1,0,0,-1,1,1], (al/2)*[-1,1,0,0,0,0,1]],
[(bt/2)*[1,-1,1,-1,0,0,1], (bt/2)*[-1,1,1,-1,0,0,1], [0,0,1,0,0,0,0], (al/2)*[0,0,1,1,0,0,-1], (bt/2)*[0,0,1,-1,1,-1,1], (bt/2)*[0,0,1,-1,-1,1,1], (al/2)*[0,0,1,-1,0,0,1]],
[(bt/2)*[1,-1,-1,1,0,0,1], (bt/2)*[-1,1,-1,1,0,0,1], (al/2)*[0,0,1,1,0,0,-1], [0,0,0,1,0,0,0], (bt/2)*[0,0,-1,1,1,-1,1], (bt/2)*[0,0,-1,1,-1,1,1],
(al/2)*[0,0,-1,1,0,0,1]],
[(bt/2)*[1,-1,0,0,1,-1,1], (bt/2)*[-1,1,0,0,1,-1,1], (bt/2)*[0,0,1,-1,1,-1,1], (bt/2)*[0,0,-1,1,1,-1,1], [0,0,0,0,1,0,0], (al/2)*[0,0,0,0,1,1,-1],
(al/2)*[0,0,0,0,1,-1,1]],
[(bt/2)*[1,-1,0,0,-1,1,1], (bt/2)*[-1,1,0,0,-1,1,1], (bt/2)*[0,0,1,-1,-1,1,1], (bt/2)*[0,0,-1,1,-1,1,1], (al/2)*[0,0,0,0,1,1,-1], [0,0,0,0,0,1,0],
(al/2)*[0,0,0,0,-1,1,1]],
[(al/2)*[1,-1,0,0,0,0,1], (al/2)*[-1,1,0,0,0,0,1], (al/2)*[0,0,1,-1,0,0,1], (al/2)*[0,0,-1,1,0,0,1], (al/2)*[0,0,0,0,1,-1,1], (al/2)*[0,0,0,0,-1,1,1], 
[0,0,0,0,0,0,1]]
];

prod := function(u,v)
local i,j,k, ans;
ans:=z * [0,0,0,0,0,0,0];
for i in [1..7] do
for j in [1..7] do
for k in [1..7] do
ans[k] := ans[k] + u[i]*v[j]*mas[i][j][k];
od;
od;
od;
return ans;
end;

a0:=z*[1,0,0,0,0,0,0];;
a0p:=z*[0,1,0,0,0,0,0];;
a1:=z*[0,0,1,0,0,0,0];;
a1p:=z*[0,0,0,1,0,0,0];;
a2:=z*[0,0,0,0,1,0,0];;
a2p:=z*[0,0,0,0,0,1,0];;
d:=z*[0,0,0,0,0,0,1];;

A:=VectorSpace(F,[a0,a0p,a1,a1p,a2,a2p,d]);;

frob:=[[1,al/2,bt/2,bt/2,bt/2,bt/2,al/2],[al/2,1,bt/2,bt/2,bt/2,bt/2,al/2],
[bt/2,bt/2,1,al/2,bt/2,bt/2,al/2],[bt/2,bt/2,al/2,1,bt/2,bt/2,al/2],
[bt/2,bt/2,bt/2,bt/2,1,al/2,al/2],[bt/2,bt/2,bt/2,bt/2,al/2,1,al/2],
[al/2,al/2,al/2,al/2,al/2,al/2,1]];

return [A,F,mas,prod,frob];;
fi;
end;

4B3Details:=function();
Print("1:Vector Space, 2:Field, 3:Mult Matrix, 4:Mult Function, 5:Frobenius Matrix, Basis is a0,a0p,a1,a1p,a2,a2p,d"); 
end;


###Edge Algebra 4Y(al,1-al^2/2)

4Y3:=function(al,FF)
local F, bt, z, mas, prod, a0, a0p, a1, a1p, a2, a2p, e, A, gm, frob;

if al in [1,0,2] then Print("Not Defined!"); 
else

if al in FF then F:=FF;
else F:=FunctionField(FF,["al"]);
fi;
bt:=(1-al^2)/2;

## order of the basis: a0, a0p, a1, a1p, a2, a2p, d

z:=al^0;

mas :=z * [
[[1,0,0,0,0,0,0], (1/2)*[al-1,al-1,0,0,0,0,al+1], (1/2)*[bt,-bt,bt,-bt,0,0,(al+1)^2/2], (1/2)*[bt,-bt,-bt,bt,0,0,(al+1)^2/2], 
(1/2)*[bt,-bt,0,0,bt,-bt,(al+1)^2/2], (1/2)*[bt,-bt,0,0,-bt,bt,(al+1)^2/2], (1/2)*[1-al,al-1,0,0,0,0,al+1]],

[(1/2)*[al-1,al-1,0,0,0,0,al+1], [0,1,0,0,0,0,0], (1/2)*[-bt,bt,bt,-bt,0,0,(al+1)^2/2], (1/2)*[-bt,bt,-bt,bt,0,0,(al+1)^2/2], 
(1/2)*[-bt,bt,0,0,bt,-bt,(al+1)^2/2], (1/2)*[-bt,bt,0,0,-bt,bt,(al+1)^2/2], (1/2)*[al-1,1-al,0,0,0,0,al+1]],

[(1/2)*[bt,-bt,bt,-bt,0,0,(al+1)^2/2], (1/2)*[-bt,bt,bt,-bt,0,0,(al+1)^2/2], [0,0,1,0,0,0,0], (1/2)*[0,0,al-1,al-1,0,0,al+1], 
(1/2)*[0,0,bt,-bt,bt,-bt,(al+1)^2/2], (1/2)*[0,0,bt,-bt,-bt,bt,(al+1)^2/2], (1/2)*[0,0,1-al,al-1,0,0,al+1]],

[(1/2)*[bt,-bt,-bt,bt,0,0,(al+1)^2/2], (1/2)*[-bt,bt,-bt,bt,0,0,(al+1)^2/2], (1/2)*[0,0,al-1,al-1,0,0,al+1], [0,0,0,1,0,0,0], 
(1/2)*[0,0,-bt,bt,bt,-bt,(al+1)^2/2], (1/2)*[0,0,-bt,bt,-bt,bt,(al+1)^2/2], (1/2)*[0,0,al-1,1-al,0,0,al+1]],

[(1/2)*[bt,-bt,0,0,bt,-bt,(al+1)^2/2], (1/2)*[-bt,bt,0,0,bt,-bt,(al+1)^2/2], (1/2)*[0,0,bt,-bt,bt,-bt,(al+1)^2/2], (1/2)*[0,0,-bt,bt,bt,-bt,(al+1)^2/2], 
[0,0,0,0,1,0,0], (1/2)*[0,0,0,0,al-1,al-1,al+1],(1/2)*[0,0,0,0,1-al,al-1,al+1]],

[(1/2)*[bt,-bt,0,0,-bt,bt,(al+1)^2/2], (1/2)*[-bt,bt,0,0,-bt,bt,(al+1)^2/2], (1/2)*[0,0,bt,-bt,-bt,bt,(al+1)^2/2], (1/2)*[0,0,-bt,bt,-bt,bt,(al+1)^2/2], 
(1/2)*[0,0,0,0,al-1,al-1,al+1], [0,0,0,0,0,1,0], (1/2)*[0,0,0,0,al-1,1-al,al+1]],

[(1/2)*[1-al,al-1,0,0,0,0,al+1], (1/2)*[al-1,1-al,0,0,0,0,al+1], (1/2)*[0,0,1-al,al-1,0,0,al+1], (1/2)*[0,0,al-1,1-al,0,0,al+1], 
(1/2)*[0,0,0,0,1-al,al-1,al+1], (1/2)*[0,0,0,0,al-1,1-al,al+1], [0,0,0,0,0,0,1]]
];

prod := function(u,v)
local i,j,k, ans;
ans:=z * [0,0,0,0,0,0,0];
for i in [1..7] do
for j in [1..7] do
for k in [1..7] do
ans[k] := ans[k] + u[i]*v[j]*mas[i][j][k];
od;
od;
od;
return ans;
end;

a0:=z*[1,0,0,0,0,0,0];;
a0p:=z*[0,1,0,0,0,0,0];;
a1:=z*[0,0,1,0,0,0,0];;
a1p:=z*[0,0,0,1,0,0,0];;
a2:=z*[0,0,0,0,1,0,0];;
a2p:=z*[0,0,0,0,0,1,0];;
e:=z*[0,0,0,0,0,0,1];;

A:=VectorSpace(F,[a0,a0p,a1,a1p,a2,a2p,e]);;

gm:=(2-al)*(al+1)/4;

frob:=[[1,al/2,gm,gm,gm,gm,1-al/2],[al/2,1,gm,gm,gm,gm,1-al/2],
[gm,gm,1,al/2,gm,gm,1-al/2],[gm,gm,al/2,1,gm,gm,1-al/2],
[gm,gm,gm,gm,1,al/2,1-al/2],[gm,gm,gm,gm,al/2,1,1-al/2],
[1-al/2,1-al/2,1-al/2,1-al/2,1-al/2,1-al/2,(2-al)/(al+1)]];

return [A,F,mas,prod,frob];;
fi;
end;

4Y3Details:=function();
Print("1:Vector Space, 2:Field, 3:Mult Matrix, 4:Mult Function, 5:Frobenius Matrix, Basis is a0,a0p,a1,a1p,a2,a2p,e"); 
end;

###Edge Algebra 4Y(1/2,bt)

4Yh3:=function(bt,FF)
local F, z, mas, prod, a0, a0p, a1, a1p, a2, a2p, f, A, frob;

if bt in FF then F:=FF;
else F:=FunctionField(FF,["bt"]);
fi;


## order of the basis: a0, a0p, a1, a1p, a2, a2p, f

z:=bt^0;

mas :=z * [
[[1,0,0,0,0,0,0], ((1-4*bt)/2)*[1,1,0,0,0,0,-8*bt], (bt/2)*[1,-1,1,-1,0,0,8*bt], (bt/2)*[1,-1,-1,1,0,0,8*bt], (bt/2)*[1,-1,0,0,1,-1,8*bt], (bt/2)*[1,-1,0,0,-1,1,8*bt], (1/4)*[1,-1,0,0,0,0,8*bt]],

[((1-4*bt)/2)*[1,1,0,0,0,0,-8*bt], [0,1,0,0,0,0,0], (bt/2)*[-1,1,1,-1,0,0,8*bt], (bt/2)*[-1,1,-1,1,0,0,8*bt], (bt/2)*[-1,1,0,0,1,-1,8*bt], (bt/2)*[-1,1,0,0,-1,1,8*bt], (1/4)*[-1,1,0,0,0,0,8*bt]],

[(bt/2)*[1,-1,1,-1,0,0,8*bt], (bt/2)*[-1,1,1,-1,0,0,8*bt], [0,0,1,0,0,0,0], ((1-4*bt)/2)*[0,0,1,1,0,0,-8*bt], (bt/2)*[0,0,1,-1,1,-1,8*bt], (bt/2)*[0,0,1,-1,-1,1,8*bt], (1/4)*[0,0,1,-1,0,0,8*bt]],

[(bt/2)*[1,-1,-1,1,0,0,8*bt], (bt/2)*[-1,1,-1,1,0,0,8*bt], ((1-4*bt)/2)*[0,0,1,1,0,0,-8*bt], [0,0,0,1,0,0,0], (bt/2)*[0,0,-1,1,1,-1,8*bt], (bt/2)*[0,0,-1,1,-1,1,8*bt], (1/4)*[0,0,-1,1,0,0,8*bt]],

[(bt/2)*[1,-1,0,0,1,-1,8*bt], (bt/2)*[-1,1,0,0,1,-1,8*bt], (bt/2)*[0,0,1,-1,1,-1,8*bt], (bt/2)*[0,0,-1,1,1,-1,8*bt], [0,0,0,0,1,0,0], 
((1-4*bt)/2)*[0,0,0,0,1,1,-8*bt],(1/4)*[0,0,0,0,1,-1,8*bt]],

[(bt/2)*[1,-1,0,0,-1,1,8*bt], (bt/2)*[-1,1,0,0,-1,1,8*bt], (bt/2)*[0,0,1,-1,-1,1,8*bt], (bt/2)*[0,0,-1,1,-1,1,8*bt], ((1-4*bt)/2)*[0,0,0,0,1,1,-8*bt], [0,0,0,0,0,1,0], (1/4)*[0,0,0,0,-1,1,8*bt]],

[(1/4)*[1,-1,0,0,0,0,8*bt], (1/4)*[-1,1,0,0,0,0,8*bt], (1/4)*[0,0,1,-1,0,0,8*bt], (1/4)*[0,0,-1,1,0,0,8*bt], (1/4)*[0,0,0,0,1,-1,8*bt], (1/4)*[0,0,0,0,-1,1,8*bt], [0,0,0,0,0,0,1]]
];

prod := function(u,v)
local i,j,k, ans;
ans:=z * [0,0,0,0,0,0,0];
for i in [1..7] do
for j in [1..7] do
for k in [1..7] do
ans[k] := ans[k] + u[i]*v[j]*mas[i][j][k];
od;
od;
od;
return ans;
end;

a0:=z*[1,0,0,0,0,0,0];;
a0p:=z*[0,1,0,0,0,0,0];;
a1:=z*[0,0,1,0,0,0,0];;
a1p:=z*[0,0,0,1,0,0,0];;
a2:=z*[0,0,0,0,1,0,0];;
a2p:=z*[0,0,0,0,0,1,0];;
f:=z*[0,0,0,0,0,0,1];;

A:=VectorSpace(F,[a0,a0p,a1,a1p,a2,a2p,f]);;

frob:=[[1,(4*bt-1)^2,4*bt^2,4*bt^2,4*bt^2,4*bt^2,2*bt],[(4*bt-1)^2,1,4*bt^2,4*bt^2,4*bt^2,4*bt^2,2*bt],
[4*bt^2,4*bt^2,1,(4*bt-1)^2,4*bt^2,4*bt^2,2*bt],[4*bt^2,4*bt^2,(4*bt-1)^2,1,4*bt^2,4*bt^2,2*bt],
[4*bt^2,4*bt^2,4*bt^2,4*bt^2,1,(4*bt-1)^2,2*bt],[4*bt^2,4*bt^2,4*bt^2,4*bt^2,(4*bt-1)^2,1,2*bt],
[2*bt,2*bt,2*bt,2*bt,2*bt,2*bt,1]];

return [A,F,mas,prod,frob];;
end;

4Yh3Details:=function();
Print("1:Vector Space, 2:Field, 3:Mult Matrix, 4:Mult Function, 5:Frobenius Matrix, Basis is a0,a0p,a1,a1p,a2,a2p,f"); 
end;

###Edge Algebra 4A(1/4,bt) (Constructed with Justin McInroy) We let the free variable t to be 0. 

4A3Zero:=function(FF)
local F, d, mas, prod, a0, a0p, a1, a1p, a2, a2p, q01, q02, q12, r0, r1, r2, A, frob;

## order of the basis: a0, a0p, a1, a1p, a2, a2p, q01, q02, q12, r0, r1, r2

F:=FF;

d:=1^0;

mas :=d * [
[[1,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],(1/8)*[3,-1,3,-1,0,0,8,0,0,0,0,0],(1/8)*[3,-1,-1,3,0,0,8,0,0,0,0,0],
(1/8)*[3,-1,0,0,3,-1,0,8,0,0,0,0], (1/8)*[3,-1,0,0,-1,3,0,8,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,1/2,0,0],
[0,0,0,0,0,0,0,0,0,1/4,0,0], (1/8)*[0,0,0,0,0,0,0,0,0,-1,1,-1], (1/8)*[0,0,0,0,0,0,0,0,0,-1,-1,1]],

[[0,0,0,0,0,0,0,0,0,0,0,0], [0,1,0,0,0,0,0,0,0,0,0,0], (1/8)*[-1,3,3,-1,0,0,8,0,0,0,0,0],(1/8)*[-1,3,-1,3,0,0,8,0,0,0,0,0],
(1/8)*[-1,3,0,0,3,-1,0,8,0,0,0,0], (1/8)*[-1,3,0,0,-1,3,0,8,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,1/2,0,0],
[0,0,0,0,0,0,0,0,0,1/4,0,0], (1/8)*[0,0,0,0,0,0,0,0,0,-1,1,-1], (1/8)*[0,0,0,0,0,0,0,0,0,-1,-1,1]],

[(1/8)*[3,-1,3,-1,0,0,8,0,0,0,0,0],(1/8)*[-1,3,3,-1,0,0,8,0,0,0,0,0], [0,0,1,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0],
(1/8)*[0,0,3,-1,3,-1,0,0,8,0,0,0], (1/8)*[0,0,3,-1,-1,3,0,0,8,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,1/2,0], [0,0,0,0,0,0,0,0,0,0,0,0],
(1/8)*[0,0,0,0,0,0,0,0,0,1,-1,-1],[0,0,0,0,0,0,0,0,0,0,1/4,0],(1/8)*[0,0,0,0,0,0,0,0,0,-1,-1,1]],

[(1/8)*[3,-1,-1,3,0,0,8,0,0,0,0,0],(1/8)*[-1,3,-1,3,0,0,8,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,1,0,0,0,0,0,0,0,0],
(1/8)*[0,0,-1,3,3,-1,0,0,8,0,0,0], (1/8)*[0,0,-1,3,-1,3,0,0,8,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,1/2,0], [0,0,0,0,0,0,0,0,0,0,0,0],
(1/8)*[0,0,0,0,0,0,0,0,0,1,-1,-1],[0,0,0,0,0,0,0,0,0,0,1/4,0],(1/8)*[0,0,0,0,0,0,0,0,0,-1,-1,1]],

[(1/8)*[3,-1,0,0,3,-1,0,8,0,0,0,0], (1/8)*[-1,3,0,0,3,-1,0,8,0,0,0,0], (1/8)*[0,0,3,-1,3,-1,0,0,8,0,0,0],(1/8)*[0,0,-1,3,3,-1,0,0,8,0,0,0],
[0,0,0,0,1,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,1/2], [0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0],
(1/8)*[0,0,0,0,0,0,0,0,0,1,-1,-1],(1/8)*[0,0,0,0,0,0,0,0,0,-1,1,-1],[0,0,0,0,0,0,0,0,0,0,0,1/4]],

[(1/8)*[3,-1,0,0,-1,3,0,8,0,0,0,0], (1/8)*[-1,3,0,0,-1,3,0,8,0,0,0,0], (1/8)*[0,0,3,-1,-1,3,0,0,8,0,0,0],(1/8)*[0,0,-1,3,-1,3,0,0,8,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,1,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,1/2], [0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0],
(1/8)*[0,0,0,0,0,0,0,0,0,1,-1,-1],(1/8)*[0,0,0,0,0,0,0,0,0,-1,1,-1],[0,0,0,0,0,0,0,0,0,0,0,1/4]],

[[0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,1/2], [0,0,0,0,0,0,0,0,0,0,0,1/2],
[0,0,0,0,0,0,0,0,0,0,0,0], (-1/16)*[0,0,0,0,0,0,0,0,0,1,1,1], (-1/16)*[0,0,0,0,0,0,0,0,0,1,1,1],
[0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0]],

[[0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,1/2,0],
[0,0,0,0,0,0,0,0,0,0,1/2,0], [0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0],
(-1/16)*[0,0,0,0,0,0,0,0,0,1,1,1], [0,0,0,0,0,0,0,0,0,0,0,0], (-1/16)*[0,0,0,0,0,0,0,0,0,1,1,1],
[0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0]],

[[0,0,0,0,0,0,0,0,0,1/2,0,0], [0,0,0,0,0,0,0,0,0,1/2,0,0], [0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0],
(-1/16)*[0,0,0,0,0,0,0,0,0,1,1,1], (-1/16)*[0,0,0,0,0,0,0,0,0,1,1,1], [0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0]],

[[0,0,0,0,0,0,0,0,0,1/4,0,0],[0,0,0,0,0,0,0,0,0,1/4,0,0], (1/8)*[0,0,0,0,0,0,0,0,0,1,-1,-1],(1/8)*[0,0,0,0,0,0,0,0,0,1,-1,-1],
(1/8)*[0,0,0,0,0,0,0,0,0,1,-1,-1], (1/8)*[0,0,0,0,0,0,0,0,0,1,-1,-1],
[0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0]],

[(1/8)*[0,0,0,0,0,0,0,0,0,-1,1,-1],(1/8)*[0,0,0,0,0,0,0,0,0,-1,1,-1], [0,0,0,0,0,0,0,0,0,0,1/4,0],[0,0,0,0,0,0,0,0,0,0,1/4,0],
(1/8)*[0,0,0,0,0,0,0,0,0,-1,1,-1], (1/8)*[0,0,0,0,0,0,0,0,0,-1,1,-1],
[0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0]],

[(1/8)*[0,0,0,0,0,0,0,0,0,-1,-1,1], (1/8)*[0,0,0,0,0,0,0,0,0,-1,-1,1], (1/8)*[0,0,0,0,0,0,0,0,0,-1,-1,1],(1/8)*[0,0,0,0,0,0,0,0,0,-1,-1,1],
[0,0,0,0,0,0,0,0,0,0,0,1/4],[0,0,0,0,0,0,0,0,0,0,0,1/4],
[0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0]]
];



prod := function(u,v)
local i,j,k, ans;
ans:=d * [0,0,0,0,0,0,0,0,0,0,0,0];
for i in [1..12] do
for j in [1..12] do
for k in [1..12] do
ans[k] := ans[k] + u[i]*v[j]*mas[i][j][k];
od;
od;
od;
return ans;
end;


a0:=d*[1,0,0,0,0,0,0,0,0,0,0,0];;
a0p:=d*[0,1,0,0,0,0,0,0,0,0,0,0];;
a1:=d*[0,0,1,0,0,0,0,0,0,0,0,0];;
a1p:=d*[0,0,0,1,0,0,0,0,0,0,0,0];;
a2:=d*[0,0,0,0,1,0,0,0,0,0,0,0];;
a2p:=d*[0,0,0,0,0,1,0,0,0,0,0,0];;
q01:=d*[0,0,0,0,0,0,1,0,0,0,0,0];;
q02:=d*[0,0,0,0,0,0,0,1,0,0,0,0];;
q12:=d*[0,0,0,0,0,0,0,0,1,0,0,0];;
r0:=d*[0,0,0,0,0,0,0,0,0,1,0,0];;
r1:=d*[0,0,0,0,0,0,0,0,0,0,1,0];;
r2:=d*[0,0,0,0,0,0,0,0,0,0,0,1];;

A:=VectorSpace(F,[a0,a0p,a1,a1p,a2,a2p,q01,q02,q12,r0,r1,r2]);;

frob:=[
[1,0,1/2,1/2,1/2,1/2,0,0,0,0,0,0],
[0,1,1/2,1/2,1/2,1/2,0,0,0,0,0,0],
[1/2,1/2,1,0,1/2,1/2,0,0,0,0,0,0],
[1/2,1/2,0,1,1/2,1/2,0,0,0,0,0,0],
[1/2,1/2,1/2,1/2,1,0,0,0,0,0,0,0],
[1/2,1/2,1/2,1/2,0,1,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0]
];

return [A,F,mas,prod,frob];;
end;
